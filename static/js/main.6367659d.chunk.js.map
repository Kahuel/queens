{"version":3,"sources":["App.tsx","index.tsx"],"names":["generateHitting","x","y","position","result","i","newCell","includes","push","sort","a","b","getSolution","initQuuens","extraHittedCells","length","status","queens","hittedCells","reduce","acc","el","newHittedCells","hitting","filter","pos","iter","App","useState","cells","setCells","numbers","className","map","elY","elX","findIndex","cell","onClick","index","solution","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6367659d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\ninterface Cell {\n  x: number;\n  y: number;\n  position: number;\n  hitting: number[];\n}\n\nconst generateHitting = (x: number, y: number, position: number) => {\n  const result: number[] = [];\n  for (let i = 0; x - i > 0 && y - i > 0; i += 1) {\n    const newCell = position - i * 9;\n    if (!result.includes(newCell)) {\n      result.push(newCell);\n    }\n  }\n  for (let i = 0; x + i < 9 && y + i < 9; i += 1) {\n    const newCell = position + i * 9;\n    if (!result.includes(newCell)) {\n      result.push(newCell);\n    }\n  }\n  for (let i = 0; x + i < 9 && y - i > 0; i += 1) {\n    const newCell = position - i * 7;\n    if (!result.includes(newCell)) {\n      result.push(newCell);\n    }\n  }\n  for (let i = 0; x - i > 0 && y + i < 9; i += 1) {\n    const newCell = position + i * 7;\n    if (!result.includes(newCell)) {\n      result.push(newCell);\n    }\n  }\n  for (let i = 1; i < 9; i += 1) {\n    const newCell = (y - 1) * 8 + i;\n    if (!result.includes(newCell)) {\n      result.push(newCell);\n    }\n  }\n  for (let i = 0; i < 8; i += 1) {\n    const newCell = position - (y - 1) * 8 + i * 8;\n    if (!result.includes(newCell)) {\n      result.push(newCell);\n    }\n  }\n  return result.sort((a: number, b: number) => a - b);\n};\n\nconst getSolution = (\n  initQuuens: Cell[],\n  extraHittedCells: number[] = []\n): { status: string; queens: Cell[] } => {\n  if (initQuuens.length === 8) {\n    return { status: \"complited\", queens: initQuuens };\n  }\n  const hittedCells = [\n    ...initQuuens.reduce((acc: number[], el: Cell) => {\n      const newHittedCells = el.hitting.filter(\n        (pos: number) => !acc.includes(pos)\n      );\n      return [...acc, ...newHittedCells];\n    }, []),\n    ...extraHittedCells,\n  ];\n\n  for (let i = 1; i <= 64; i += 1) {\n    if (!hittedCells.includes(i)) {\n      const x = i % 8 === 0 ? 8 : i % 8;\n      const y = i - x === 0 ? 1 : (i - x) / 8 + 1;\n      const position = i;\n      const hitting = generateHitting(x, y, position);\n      const iter = getSolution([...initQuuens, { x, y, position, hitting }]);\n      if (iter.status === \"failed\") {\n        return getSolution(initQuuens, [...extraHittedCells, i]);\n      } else if (iter.status === \"complited\") {\n        return iter;\n      }\n    }\n  }\n  return { status: \"failed\", queens: initQuuens };\n};\n\nconst App: React.FC = () => {\n  const [cells, setCells] = useState<Cell[]>([]);\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8];\n\n  const hittedCells = cells.reduce((acc: number[], el: Cell) => {\n    const newHittedCells = el.hitting.filter(\n      (pos: number) => !acc.includes(pos)\n    );\n    return [...acc, ...newHittedCells];\n  }, []);\n\n  return (\n    <div>\n      <p>\n        Выберете ячейку(и), которая(ые) должны присутствовать в решении. Нажмите\n        кнопку \"найти решение\".\n      </p>\n      <p>Зелёным цветом обозначается положение ферзей, красным - битые поля.</p>\n      <p>Кнопка \"Очистить\" удаляет всех ферзей с поля.</p>\n      <div className=\"board\">\n        {numbers.map((elY: number) => {\n          return (\n            <div className=\"row\">\n              {numbers.map((elX: number) => {\n                const position = elX + (elY - 1) * 8;\n                return (\n                  <span\n                    className={`${(elX + elY) % 2 === 0 ? \"white\" : \"black\"} ${\n                      hittedCells.includes(position) ? \"red\" : \"\"\n                    } ${\n                      cells.findIndex(\n                        (cell: Cell) => cell.position === position\n                      ) !== -1\n                        ? \"green\"\n                        : \"\"\n                    }`}\n                    onClick={() => {\n                      const index = cells.findIndex(\n                        (el: Cell) => el.x === elX && el.y === elY\n                      );\n                      if (index !== -1) {\n                        setCells(\n                          cells.filter((el: Cell, i: number) => i !== index)\n                        );\n                      } else if (\n                        cells.length < 8 &&\n                        !hittedCells.includes(position)\n                      ) {\n                        setCells([\n                          ...cells,\n                          {\n                            x: elX,\n                            y: elY,\n                            position: position,\n                            hitting: generateHitting(elX, elY, position),\n                          },\n                        ]);\n                      }\n                    }}\n                  >\n                    {position}\n                  </span>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n      <button\n        onClick={() => {\n          const solution = getSolution(cells);\n          if (solution.status === \"complited\") {\n            setCells(solution.queens);\n          } else {\n            alert(\"Решений не найдено\");\n          }\n        }}\n      >\n        Найти решение.\n      </button>\n      <button onClick={() => setCells([])}>Очистить.</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}